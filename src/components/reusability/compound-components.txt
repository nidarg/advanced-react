

 Compound Components in React
What are Compound Components?
Compound Components is a design pattern in React where multiple components work together as a unit, allowing more flexibility while keeping the parent component in control. This pattern is useful for building reusable and customizable UI components like modals, tabs, dropdowns, and accordions.

Compound component "flatten" the heirarchy that I would otherwise need to pass
props through. Since I need to provide the children to render, the parent-most
component has direct access to those "grandchild" components, to which it can
pass whatever props it needs to pass directly.

🛠 How Do Compound Components Work?
Instead of passing multiple props to customize behavior, compound components let you structure child components within a parent component, using React Context or children props for communication.

✅ Example: Building a <Tabs> Component
Let’s create a Tabs component where the <Tabs> acts as a wrapper, and <Tab> and <TabPanel> are nested components inside it.

1️⃣ Creating the Tabs Component
tsx
Copy
Edit
import { createContext, useContext, useState, ReactNode } from "react";

const TabsContext = createContext<{ activeTab: string; setActiveTab: (tab: string) => void } | undefined>(undefined);

export function Tabs({ children }: { children: ReactNode }) {
  const [activeTab, setActiveTab] = useState("");

  return (
    <TabsContext.Provider value={{ activeTab, setActiveTab }}>
      <div className="tabs">{children}</div>
    </TabsContext.Provider>
  );
}

export function Tab({ label, children }: { label: string; children: ReactNode }) {
  const context = useContext(TabsContext);
  if (!context) throw new Error("Tab must be used within Tabs");

  const isActive = context.activeTab === label;

  return (
    <button onClick={() => context.setActiveTab(label)} className={isActive ? "active" : ""}>
      {children}
    </button>
  );
}

export function TabPanel({ label, children }: { label: string; children: ReactNode }) {
  const context = useContext(TabsContext);
  if (!context) throw new Error("TabPanel must be used within Tabs");

  return context.activeTab === label ? <div className="tab-panel">{children}</div> : null;
}
2️⃣ Using the Compound Components
tsx
Copy
Edit
export default function App() {
  return (
    <Tabs>
      <Tab label="home">Home</Tab>
      <Tab label="about">About</Tab>

      <TabPanel label="home">
        <h2>Welcome to the Home Page</h2>
      </TabPanel>
      <TabPanel label="about">
        <h2>About Us</h2>
      </TabPanel>
    </Tabs>
  );
}
🎯 Why Use Compound Components?
✅ Better Readability → The structure closely matches the UI.
✅ More Flexibility → Users can change behavior without modifying the core component.
✅ Encapsulation → The logic is self-contained, making it reusable.

🚀 Where to Use Compound Components?
Forms → <Form> <Input> <Button>
Dropdowns → <Dropdown> <DropdownItem>
Accordions → <Accordion> <AccordionItem>
Modals → <Modal> <ModalHeader> <ModalBody> <ModalFooter>
Final Thoughts
Compound Components provide a clean, declarative API that allows users to customize behavior without unnecessary prop drilling. They are a powerful way to structure reusable components in modern React applications! 🚀